{"version":3,"sources":["components/Filter.js","services/persons.js","components/Form.js","components/Person.js","components/Notification.js","components/ErrorNotification.js","App.js","index.js"],"names":["Filter","persons","setPersons","onChange","event","inputValue","target","value","toLowerCase","filteredContacts","filter","person","name","indexOf","baseUrl","contactObject","axios","post","then","response","data","get","contactId","delete","id","newObject","put","Form","newName","setNewName","newNumber","setNewNumber","setSuccessMessage","setErrorMessage","onSubmit","preventDefault","contactObj","number","length","personObj","find","window","confirm","changedPerson","personService","returnedPerson","map","setTimeout","catch","error","alert","returnedNote","concat","type","Person","handleRemovePerson","onClick","Notification","message","className","ErrorNotification","App","useState","successMessage","errorMessage","useEffect","initialPersons","i","personName","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b3a8392.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Filter = ({ persons, setPersons }) => {\n  const handleFilterContacts = (event) => {\n    let inputValue = event.target.value.toLowerCase();\n\n    let filteredContacts = persons.filter((person) => {\n      return person.name.toLowerCase().indexOf(inputValue) > -1;\n    });\n\n    setPersons(filteredContacts);\n  };\n\n  return (\n    <div>\n      filter shown with <input onChange={handleFilterContacts} />\n    </div>\n  );\n};\n\nexport default Filter;\n","import axios from 'axios';\nconst baseUrl = '/api/persons';\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst create = (contactObject) => {\n  const request = axios.post(baseUrl, contactObject);\n  return request.then((response) => response.data);\n};\n\nconst remove = (contactId) => {\n  return axios.delete(`${baseUrl}/${contactId}`);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\nexport default {\n  create,\n  getAll,\n  remove,\n  update,\n};\n","import React from 'react';\nimport personService from '../services/persons';\n\nconst Form = ({\n  persons,\n  setPersons,\n  newName,\n  setNewName,\n  newNumber,\n  setNewNumber,\n  setSuccessMessage,\n  setErrorMessage,\n}) => {\n  const handleNewPerson = event => {\n    event.preventDefault();\n    const contactObj = {\n      name: newName,\n      number: newNumber,\n      id: persons.length + 1,\n    };\n\n    const personObj = persons.find(person => person.name === contactObj.name);\n\n    // if person name already exists:\n    if (personObj) {\n      if (personObj.number !== contactObj.number) {\n        const confirm = window.confirm(\n          `${contactObj.name} is already added to phonebook, replace the old number with a new one?`\n        );\n\n        // change number\n        if (confirm) {\n          const changedPerson = { ...personObj, number: contactObj.number };\n\n          return personService\n            .update(changedPerson.id, changedPerson)\n            .then(returnedPerson => {\n              setPersons(\n                persons.map(person =>\n                  person.id !== changedPerson.id ? person : returnedPerson\n                )\n              );\n              setSuccessMessage(\n                `${changedPerson.name}'s number as been changed.`\n              );\n              setTimeout(() => {\n                setSuccessMessage(null);\n              }, 3000);\n            })\n            .catch(error => {\n              setErrorMessage(\n                `Information of ${newName} has already been removed from server`\n              );\n              setTimeout(() => {\n                setErrorMessage(null);\n              }, 3000);\n            });\n        } else {\n          return;\n        }\n      }\n\n      return alert(`${contactObj.name} is already added to phonebook.`);\n    }\n\n    // add new person\n    personService.create(contactObj).then(returnedNote => {\n      setPersons(persons.concat(returnedNote));\n      setNewName('');\n      setNewNumber('');\n      setSuccessMessage(`Added ${contactObj.name}`);\n      setTimeout(() => {\n        setSuccessMessage(null);\n      }, 3000);\n    });\n  };\n\n  const handleNewNumber = event => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleNewName = event => {\n    setNewName(event.target.value);\n  };\n\n  return (\n    <form onSubmit={handleNewPerson}>\n      <div>\n        name: <input value={newName} onChange={handleNewName} />\n      </div>\n      <div>\n        number: <input value={newNumber} onChange={handleNewNumber} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default Form;\n","import React from 'react';\n\nconst Person = ({ person, handleRemovePerson }) => {\n  return (\n    <p>\n      {person.name} {person.number}{' '}\n      <button onClick={handleRemovePerson}>delete</button>\n    </p>\n  );\n};\n\nexport default Person;\n","const Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className=\"notification\">{message}</div>;\n};\n\nexport default Notification;\n","const ErrorNotification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className=\"error-notification\">{message}</div>;\n};\n\nexport default ErrorNotification;\n","import React, { useState, useEffect } from 'react';\n\nimport Filter from './components/Filter';\nimport Form from './components/Form';\nimport Person from './components/Person';\nimport Notification from './components/Notification';\nimport ErrorNotification from './components/ErrorNotification';\nimport personService from './services/persons';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    personService.getAll().then(initialPersons => setPersons(initialPersons));\n  }, []);\n\n  const handleRemovePerson = id => {\n    const personName = persons.filter(person => person.id === id);\n    const confirmDelete = window.confirm(`Delete ${personName[0].name}?`);\n\n    if (confirmDelete) {\n      personService.remove(id);\n      setPersons(persons.filter(person => person.id !== id));\n    }\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={successMessage} />\n      <ErrorNotification message={errorMessage} />\n      <Filter persons={persons} setPersons={setPersons} />\n      <h3>Add a new</h3>\n      <Form\n        persons={persons}\n        setPersons={setPersons}\n        newName={newName}\n        setNewName={setNewName}\n        newNumber={newNumber}\n        setNewNumber={setNewNumber}\n        setSuccessMessage={setSuccessMessage}\n        setErrorMessage={setErrorMessage}\n      />\n      <h2>Numbers</h2>\n      <div>\n        {persons.map((person, i) => (\n          <Person\n            key={i}\n            person={person}\n            handleRemovePerson={() => handleRemovePerson(person.id)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}